{"version":3,"sources":["components/StoryParallax/index.js","pages/Story/index.tsx","pages/Landing/index.tsx","shared/config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["StoryParallax","props","state","window","addEventListener","e","layers","Array","from","document","querySelectorAll","topDistance","pageYOffset","forEach","layer","speed","getAttribute","movement","style","transform","className","ref","c","container","id","data-speed","css","React","Component","StoryPage","settings","LinkColor","MainPage","styled","TextHolder","LinkStyle","Giraffe","P","Header","LandingPage","options","reverse","scale","max","perspective","reset","height","width","src","to","href","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6kBAIqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,iFAMjBC,OAAOC,iBAAiB,UAAU,SAASC,GACzC,IAAMC,EAASC,MAAMC,KAAKC,SAASC,iBAAiB,oBAChDC,EAAcR,OAAOS,YAEzBN,EAAOO,SAAQ,SAAAC,GACb,IAAIC,EAAQD,EAAME,aAAa,cAC3BC,GAAcN,EAAcI,EAAS,IACzCD,EAAMI,MAAMC,UAAZ,qBAAsCF,EAAtC,e,+BAKI,IAAD,OACP,OACE,yBAAKG,UAAU,WAAWC,IAAK,SAAAC,GAAC,OAAK,EAAKC,UAAYD,IACpD,yBAAKF,UAAU,iBAAiBI,GAAG,UAAUC,aAAW,MACtD,yBACEL,UAAWM,YAAF,MADX,8BAaF,yBAAKN,UAAU,iBAAiBI,GAAG,UAAUC,aAAW,a,GApCrBE,IAAMC,W,ybCE5BC,E,iLAEjB,OACE,6BACE,kBAAC,EAAD,MACA,yBACET,UAAWM,YAAF,MADX,wE,GAL+BC,IAAMC,W,u6DCQ7C,IAAME,EAAW,CACfC,UCXM,WDcFC,EAAWC,YAAO,MAAPA,CAAH,KAWRC,EAAaD,YAAO,MAAPA,CAAH,IC7BgB,8BDqC1BE,EAAYF,YAAO,IAAPA,CAAH,IACJH,EAASC,WAOdK,EAAUH,YAAO,MAAPA,CAAH,IC7CmB,8BDyD1BI,EAAIJ,YAAO,IAAPA,CAAH,KAIDK,EAASL,YAAO,KAAPA,CAAH,KAISM,E,iLAEjB,OACE,kBAACP,EAAD,KACE,yBACEZ,UAAWM,YAAF,ICrEa,8BD8EtB,kBAAC,IAAD,CACEN,UAAU,OACVoB,QAAS,CACPC,SAAS,EACTC,MAAO,EACPC,IAAK,GACLC,YAAa,KACb7B,MAAO,IACP8B,OAAO,GAET3B,MAAO,CACL4B,OAAQ,OACRC,MAAO,SAGT,yBAAK3B,UAAU,cACb,yBACEA,UAAWM,YAAF,MAUT,kBAACU,EAAD,CAASY,IAAK,oCACd,kBAACd,EAAD,KACE,kBAACI,EAAD,iBACA,kBAACD,EAAD,+FAEiC,IAC/B,kBAAC,IAAD,CACEY,GAAG,SACH7B,UAAWM,YAAF,IACEI,EAASC,YAHtB,cAHF,KAkBA,kBAACM,EAAD,mBACc,IACZ,kBAACF,EAAD,CACEf,UAAWM,YAAF,KAGTwB,KAAK,2BAJP,QAFF,IAUI,IACF,kBAACf,EAAD,CAAWe,KAAK,2BAAhB,mBAXF,KAiBA,kBAACb,EAAD,uBACkB,IAChB,kBAACF,EAAD,CAAWe,KAAK,iCAAhB,UAEa,IAJf,SAKS,IACP,kBAACf,EAAD,CAAWe,KAAK,uCAAhB,YANF,wDAYA,kBAACb,EAAD,wB,GA3FuBV,IAAMC,WE7ChCuB,E,iLAbX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWzB,IACtC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAWf,W,GAP3BZ,IAAMC,WCOJ2B,QACW,cAA7BpD,OAAOqD,SAASC,UAEe,UAA7BtD,OAAOqD,SAASC,UAEhBtD,OAAOqD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnD,SAASoD,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.31ab9a2d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Parallax.scss\";\nimport { css } from \"emotion\";\n\nexport default class StoryParallax extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", function(e) {\n      const layers = Array.from(document.querySelectorAll(\".parallax-layer\"));\n      let topDistance = window.pageYOffset;\n\n      layers.forEach(layer => {\n        let speed = layer.getAttribute(\"data-speed\");\n        let movement = -((topDistance * speed) / 100);\n        layer.style.transform = `translateY(${movement}px)`;\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Parallax\" ref={c => (this.container = c)}>\n        <div className=\"parallax-layer\" id=\"layer-0\" data-speed=\"40\">\n          <div\n            className={css`\n              font-style: \"Times New Roman\";\n              font-size: 72px;\n              margin: 150px;\n              @media (max-width: 700px) {\n                font-size: 60px;\n              }\n            `}\n          >\n            The Story of Max Wu (wip)\n          </div>\n        </div>\n        <div className=\"parallax-layer\" id=\"layer-1\" data-speed=\"100\" />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport Parallax from \"../../components/StoryParallax\";\n\nimport { css } from \"emotion\";\n\nexport default class StoryPage extends React.Component {\n  render() {\n    return (\n      <div>\n        <Parallax />\n        <div\n          className={css`\n            height: 100vh;\n            background-color: black;\n            width: 100%;\n            /* background-color: #010220; */\n            background-image: linear-gradient(#010220, gray);\n            z-index: 10;\n            color: white;\n\n            display: flex;\n            justify-content: center;\n            align-items: center;\n          `}\n        >\n          Hello! Nothing here yet but I will add a lot of fun stuff soon!\n        </div>\n      </div>\n    );\n  }\n}\n","/// <reference path=\"./index.d.ts\"/>\n\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"emotion\";\nimport Tilt from \"react-tilt\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  mobileMediaQuery,\n  tabletMediaQuery,\n  colors\n} from \"../../shared/config\";\n\nconst settings = {\n  LinkColor: colors.teal\n};\n\nconst MainPage = styled(\"div\")`\n  background-color: white;\n\n  height: 100vh;\n  width: 100%;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TextHolder = styled(\"div\")`\n  height: auto;\n  width: calc(100% - 220px);\n  ${tabletMediaQuery} {\n    width: 100%;\n  }\n`;\n\nconst LinkStyle = styled(\"a\")`\n  color: ${settings.LinkColor};\n  text-decoration: none;\n  &:hover {\n    filter: brightness(140%);\n  }\n`;\n\nconst Giraffe = styled(\"img\")`\n  height: 200px;\n  width: 200px;\n  margin: 10px;\n  object-fit: cover;\n  border-radius: 50%;\n  border: 1px dotted gray;\n  ${tabletMediaQuery} {\n    display: none;\n  }\n`;\n\nconst P = styled(\"p\")`\n  margin: 20px;\n`;\n\nconst Header = styled(\"h1\")`\n  margin: 20px;\n`;\n\nexport default class LandingPage extends React.Component {\n  render() {\n    return (\n      <MainPage>\n        <div\n          className={css`\n            width: 50%;\n            height: auto;\n            ${mobileMediaQuery} {\n              width: 70%;\n            }\n            min-width: 300px;\n          `}\n        >\n          <Tilt\n            className=\"Tilt\"\n            options={{\n              reverse: true,\n              scale: 1,\n              max: 15,\n              perspective: 1500,\n              speed: 10000,\n              reset: true\n            }}\n            style={{\n              height: \"auto\",\n              width: \"100%\"\n            }}\n          >\n            <div className=\"Tilt-inner\">\n              <div\n                className={css`\n                  display: flex;\n                  flex-direction: row;\n                  align-items: center;\n                  font-size: 20px;\n                  padding: 20px;\n                  border: 3px solid black;\n                  border-radius: 20px;\n                `}\n              >\n                <Giraffe src={\"https://i.imgur.com/wSasxPZ.jpg\"}></Giraffe>\n                <TextHolder>\n                  <Header>Hello :)</Header>\n                  <P>\n                    Welcome to my (WIP) site! Nothing much here yet but stay\n                    tuned for cool stuff. Here's a{\" \"}\n                    <Link\n                      to=\"/story\"\n                      className={css`\n                        color: ${settings.LinkColor};\n                        text-decoration: none;\n                        &:hover {\n                          filter: brightness(140%);\n                        }\n                      `}\n                    >\n                      sneak peek\n                    </Link>\n                    !\n                  </P>\n\n                  <P>\n                    Some links:{\" \"}\n                    <LinkStyle\n                      className={css`\n                        font-weight: bold;\n                      `}\n                      href=\"http://novaforgood.org/\"\n                    >\n                      Nova\n                    </LinkStyle>\n                    ,{\" \"}\n                    <LinkStyle href=\"https://dailybruin.com/\">\n                      the Daily Bruin\n                    </LinkStyle>\n                    .\n                  </P>\n\n                  <P>\n                    Also, here's my{\" \"}\n                    <LinkStyle href=\"https://github.com/legitmaxwu\">\n                      GitHub\n                    </LinkStyle>{\" \"}\n                    and my{\" \"}\n                    <LinkStyle href=\"https://www.linkedin.com/in/maxcwu/\">\n                      LinkedIn\n                    </LinkStyle>\n                    . (Feel free to connect and ping me about anything!)\n                  </P>\n\n                  <P>- Max</P>\n                </TextHolder>\n              </div>\n            </div>\n          </Tilt>\n        </div>\n      </MainPage>\n    );\n  }\n}\n","export const tabletMediaQuery = \"@media (max-width: 1000px)\";\nexport const mobileMediaQuery = \"@media (max-width: 700px)\";\n\nexport const colors = {\n  teal: \"#008080\"\n};\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport StoryPage from \"./pages/Story\";\nimport LandingPage from \"./pages/Landing\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route exact path=\"/story\" component={StoryPage} />\n            <Route exact path=\"/\" component={LandingPage} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}